// Generated by CoffeeScript 1.12.7
(function() {
  var Level, i, j, ref, startScene;

  window.levels = [];

  window.currentLevel = null;

  window.levels[1] = {
    name: "Training",
    deco: [
      {
        path: "assets/iris.png",
        x: -100,
        y: -100,
        alpha: 1,
        depth: 0.99
      }, {
        path: "assets/planet.png",
        x: 100,
        y: 100,
        alpha: 1,
        depth: 0.5
      }, {
        path: 'assets/tutorial/next_round.png',
        x: 20,
        y: 80,
        alpha: 1,
        depth: 0.1
      }, {
        path: 'assets/tutorial/ships.png',
        x: 100,
        y: 20,
        alpha: 1,
        depth: 0.1
      }, {
        path: 'assets/tutorial/ship.png',
        x: 100,
        y: 300,
        alpha: 1,
        depth: 0.1
      }, {
        path: 'assets/tutorial/camera.png',
        x: 600,
        y: 100,
        alpha: 1,
        depth: 0.1
      }, {
        path: 'assets/tutorial/controller.png',
        x: 370,
        y: 280,
        alpha: 1,
        depth: 0.1
      }, {
        path: 'assets/tutorial/enemy.png',
        x: 500,
        y: 400,
        alpha: 1,
        depth: 0.1
      }
    ],
    ships: [
      {
        type: "Cruiser",
        x: 300,
        y: 350,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 700,
        y: 350,
        rot: 180,
        team: "Player 2"
      }
    ],
    teams: [
      {
        name: "Player 1",
        type: "HumanPlayer"
      }, {
        name: "Player 2",
        type: "SittingDuckAI"
      }
    ]
  };

  window.levels[2] = {
    name: "Fun with Fighters",
    deco: [
      {
        path: "assets/iris.png",
        x: -100,
        y: -100,
        alpha: 1,
        depth: 0.99
      }
    ],
    ships: [
      {
        type: "Fighter",
        x: 250,
        y: 100,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 250,
        y: 160,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 250,
        y: 220,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 250,
        y: 280,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 800,
        y: 100,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 160,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 220,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 280,
        rot: 180,
        team: "Player 2"
      }
    ],
    teams: [
      {
        name: "Player 1",
        type: "HumanPlayer"
      }, {
        name: "Player 2",
        type: "HumanPlayer"
      }
    ]
  };

  window.levels[3] = {
    name: "The Ambush",
    deco: [
      {
        path: "assets/iris.png",
        x: -100,
        y: -100,
        alpha: 1,
        depth: 0.99
      }
    ],
    ships: [
      {
        type: "Fighter",
        x: 650,
        y: 100,
        rot: 150,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 675,
        y: 150,
        rot: 150,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 700,
        y: 200,
        rot: 150,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 700,
        y: 350,
        rot: 180,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 700,
        y: 500,
        rot: 210,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 675,
        y: 550,
        rot: 210,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 650,
        y: 600,
        rot: 210,
        team: "Player 1"
      }, {
        type: "Cruiser",
        x: 300,
        y: 350,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Cruiser",
        x: 300,
        y: 400,
        rot: 180,
        team: "Player 2"
      }
    ],
    teams: [
      {
        name: "Player 1",
        type: "HumanPlayer"
      }, {
        name: "Player 2",
        type: "HumanPlayer"
      }
    ]
  };

  window.levels[4] = {
    name: "Epic Fleet Fight",
    deco: [
      {
        path: "assets/iris.png",
        x: -100,
        y: -100,
        alpha: 1,
        depth: 0.99
      }
    ],
    ships: [
      {
        type: "Fighter",
        x: 200,
        y: 175,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 200,
        y: 225,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Cruiser",
        x: 100,
        y: 275,
        rot: 0,
        team: "Player 1"
      }, {
        type: "BattleShip",
        x: 100,
        y: 350,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Cruiser",
        x: 100,
        y: 425,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 200,
        y: 475,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 200,
        y: 525,
        rot: 0,
        team: "Player 1"
      }, {
        type: "Fighter",
        x: 800,
        y: 175,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 225,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Cruiser",
        x: 900,
        y: 275,
        rot: 180,
        team: "Player 2"
      }, {
        type: "BattleShip",
        x: 900,
        y: 350,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Cruiser",
        x: 900,
        y: 425,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 475,
        rot: 180,
        team: "Player 2"
      }, {
        type: "Fighter",
        x: 800,
        y: 525,
        rot: 180,
        team: "Player 2"
      }
    ],
    teams: [
      {
        name: "Player 1",
        type: "HumanPlayer"
      }, {
        name: "Player 2",
        type: "HumanPlayer"
      }
    ]
  };

  Level = (function() {
    function Level(lvl) {
      var bckg_info, i, j, k, l, len, len1, len2, ref, ref1, ref2, ship, ship_desc, team, team_desc;
      this.ships = [];
      this.teams = [];
      this.teams_by_name = {};
      Crafty.background("#000000");
      ref = lvl.deco;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        bckg_info = ref[i];
        Crafty.e("BackgroundObject").backgroundObject(bckg_info);
      }
      ref1 = lvl.teams;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        team_desc = ref1[i];
        team = Crafty.e(team_desc.type);
        team.name = team_desc.name;
        this.teams[i] = team;
        this.teams_by_name[team_desc.name] = team;
      }
      ref2 = lvl.ships;
      for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
        ship_desc = ref2[i];
        ship = Crafty.e(ship_desc.type);
        ship.ship();
        ship.attr({
          rotation: ship_desc.rot
        });
        ship.set_pos(ship_desc.x, ship_desc.y);
        ship.team = ship_desc.team;
        ship.ship_id = this.teams_by_name[ship_desc.team].fleet.length;
        this.teams_by_name[ship_desc.team].fleet.push(ship);
        this.ships[i] = ship;
      }
    }

    Level.prototype.next_planning_turn = function() {
      var team;
      if (this.current_team >= this.teams.length) {
        return this.animation_phase();
      } else {
        team = this.teams[this.current_team];
        this.current_team += 1;
        return team.planning_turn();
      }
    };

    Level.prototype.planning_phase = function() {
      var j, k, len, len1, obj_id, ref, ref1, ship;
      this.check_win_conditions();
      this.state = "planning";
      ref = Crafty("Damagable");
      for (j = 0, len = ref.length; j < len; j++) {
        obj_id = ref[j];
        Crafty(obj_id).regen_shields();
      }
      if (this.check_win_conditions()) {
        return;
      }
      ref1 = Crafty("Ship");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        ship = ref1[k];
        ship = Crafty(ship);
        ship.removeComponent("AnimatedShip");
      }
      this.current_team = 0;
      return this.next_planning_turn();
    };

    Level.prototype.animation_phase = function() {
      var j, len, ref, results, ship, ship_id;
      this.state = "animating";
      ref = Crafty("Ship");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        ship_id = ref[j];
        ship = Crafty(ship_id);
        results.push(ship.addComponent("AnimatedShip"));
      }
      return results;
    };

    Level.prototype.ship_finished_animating = function() {
      var count_unfinished_ships, j, len, ref, ship;
      count_unfinished_ships = 0;
      ref = Crafty("Ship");
      for (j = 0, len = ref.length; j < len; j++) {
        ship = ref[j];
        ship = Crafty(ship);
        if (ship.has("AnimatedShip")) {
          count_unfinished_ships += 1;
        }
      }
      if (count_unfinished_ships === 0) {
        return this.planning_phase();
      }
    };

    Level.prototype.check_win_conditions = function() {
      var alive_teams, j, len, ref, team;
      alive_teams = 0;
      ref = this.teams;
      for (j = 0, len = ref.length; j < len; j++) {
        team = ref[j];
        if (this.get_living_ships_of(team).length > 0) {
          alive_teams += 1;
          window.winner = team;
        }
      }
      if (alive_teams <= 0) {
        window.winner = {
          name: "Nobody"
        };
      }
      if (alive_teams <= 1) {
        Crafty.scene("menu");
        window.clear_bullet_canvas();
        return true;
      }
      return false;
    };

    Level.prototype.get_living_ships_of = function(team) {
      var ship;
      return (function() {
        var j, len, ref, results;
        ref = team.fleet;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          ship = ref[j];
          if (ship.is_alive()) {
            results.push(ship);
          }
        }
        return results;
      })();
    };

    return Level;

  })();

  startScene = function(i) {
    window.currentLevel = new Level(levels[i]);
    Crafty.viewport.mouselook(true);
    return window.currentLevel.planning_phase();
  };

  for (i = j = 1, ref = levels.length - 1; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
    Crafty.scene("level_" + i, startScene.bind(null, i));
  }

}).call(this);
